/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v1.0.0
package mocks

import dnsimple "github.com/dnsimple/dnsimple-go/dnsimple"
import mock "github.com/stretchr/testify/mock"

// DnsimpleZoneServiceInterface is an autogenerated mock type for the DnsimpleZoneServiceInterface type
type DnsimpleZoneServiceInterface struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: accountID, zoneID, recordAttributes
func (_m *DnsimpleZoneServiceInterface) CreateRecord(accountID string, zoneID string, recordAttributes dnsimple.ZoneRecord) (*dnsimple.ZoneRecordResponse, error) {
	ret := _m.Called(accountID, zoneID, recordAttributes)

	var r0 *dnsimple.ZoneRecordResponse
	if rf, ok := ret.Get(0).(func(string, string, dnsimple.ZoneRecord) *dnsimple.ZoneRecordResponse); ok {
		r0 = rf(accountID, zoneID, recordAttributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsimple.ZoneRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, dnsimple.ZoneRecord) error); ok {
		r1 = rf(accountID, zoneID, recordAttributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecord provides a mock function with given fields: accountID, zoneID, recordID
func (_m *DnsimpleZoneServiceInterface) DeleteRecord(accountID string, zoneID string, recordID int) (*dnsimple.ZoneRecordResponse, error) {
	ret := _m.Called(accountID, zoneID, recordID)

	var r0 *dnsimple.ZoneRecordResponse
	if rf, ok := ret.Get(0).(func(string, string, int) *dnsimple.ZoneRecordResponse); ok {
		r0 = rf(accountID, zoneID, recordID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsimple.ZoneRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(accountID, zoneID, recordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecords provides a mock function with given fields: accountID, zoneID, options
func (_m *DnsimpleZoneServiceInterface) ListRecords(accountID string, zoneID string, options *dnsimple.ZoneRecordListOptions) (*dnsimple.ZoneRecordsResponse, error) {
	ret := _m.Called(accountID, zoneID, options)

	var r0 *dnsimple.ZoneRecordsResponse
	if rf, ok := ret.Get(0).(func(string, string, *dnsimple.ZoneRecordListOptions) *dnsimple.ZoneRecordsResponse); ok {
		r0 = rf(accountID, zoneID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsimple.ZoneRecordsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *dnsimple.ZoneRecordListOptions) error); ok {
		r1 = rf(accountID, zoneID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListZones provides a mock function with given fields: accountID, options
func (_m *DnsimpleZoneServiceInterface) ListZones(accountID string, options *dnsimple.ZoneListOptions) (*dnsimple.ZonesResponse, error) {
	ret := _m.Called(accountID, options)

	var r0 *dnsimple.ZonesResponse
	if rf, ok := ret.Get(0).(func(string, *dnsimple.ZoneListOptions) *dnsimple.ZonesResponse); ok {
		r0 = rf(accountID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsimple.ZonesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *dnsimple.ZoneListOptions) error); ok {
		r1 = rf(accountID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecord provides a mock function with given fields: accountID, zoneID, recordID, recordAttributes
func (_m *DnsimpleZoneServiceInterface) UpdateRecord(accountID string, zoneID string, recordID int, recordAttributes dnsimple.ZoneRecord) (*dnsimple.ZoneRecordResponse, error) {
	ret := _m.Called(accountID, zoneID, recordID, recordAttributes)

	var r0 *dnsimple.ZoneRecordResponse
	if rf, ok := ret.Get(0).(func(string, string, int, dnsimple.ZoneRecord) *dnsimple.ZoneRecordResponse); ok {
		r0 = rf(accountID, zoneID, recordID, recordAttributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsimple.ZoneRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, dnsimple.ZoneRecord) error); ok {
		r1 = rf(accountID, zoneID, recordID, recordAttributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
